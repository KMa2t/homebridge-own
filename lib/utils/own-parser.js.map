{"version":3,"sources":["../../src/utils/own-parser.js"],"names":[],"mappings":";;;;;;;;;;IAAqB,S;;;;;;;+BAED,G,EAAK;AACrB,UAAM,SAAS,SAAS,GAAT,EAAc,EAAd,CAAf;AACA,cAAQ,MAAR;AACE,aAAK,CAAL;AACE,iBAAO,UAAP;AACF,aAAK,CAAL;AACE,iBAAO,OAAP;AACF,aAAK,CAAL;AACE,iBAAO,YAAP;AACF,aAAK,CAAL;AACE,iBAAO,MAAP;AACF,aAAK,CAAL;AACE,iBAAO,aAAP;AACF,aAAK,CAAL;AACE,iBAAO,eAAP;AACF,aAAK,CAAL;AACE,iBAAO,YAAP;AACF,aAAK,EAAL;AACE,iBAAO,SAAP;AACF,aAAK,EAAL;AACA,aAAK,EAAL;AACE,iBAAO,KAAP;AACF,aAAK,EAAL;AACE,iBAAO,cAAP;AACF,aAAK,EAAL;AACE,iBAAO,iBAAP;AACF,aAAK,EAAL;AACE,iBAAO,OAAP;AACF,aAAK,EAAL;AACE,iBAAO,QAAP;AACF;AACE,iBAAO,IAAP;AA7BJ;AA+BD;;;8BAEgB,G,EAAK,K,EAAO;AAC3B,UAAM,SAAS,SAAS,GAAT,EAAc,EAAd,CAAf;AACA,UAAM,WAAW,SAAS,KAAT,EAAgB,EAAhB,CAAjB;AACA,cAAQ,MAAR;AACE,aAAK,CAAL;AACE;AACA,kBAAQ,QAAR;AACE,iBAAK,CAAL;AACE,qBAAO,KAAP;AACF,iBAAK,CAAL;AACE,qBAAO,IAAP;AACF;AACE,qBAAO,IAAP;AANJ;;AASF,aAAK,CAAL;AACE;AACA,iBAAO,QAAP;;AAEF,aAAK,CAAL;AACE;AACA,iBAAO,WAAW,EAAlB;;AAEF;AACE,iBAAO,IAAP;AArBJ;AAuBD;;;8BAEgB,I,EAAM;AACrB,UAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B,OAAO,EAAP;AAC9B,UAAM,QAAQ,oCAAd;AACA;AACA,UAAM,SAAS,kCAAf;;AAEA,UAAI,MAAM,IAAN,CAAW,IAAX,CAAJ,EAAsB;AACpB,YAAM,WAAW,KAAK,KAAL,CAAW,KAAX,CAAjB;AACA,YAAI,SAAS,MAAT,GAAkB,CAAtB,EAAyB,OAAO,EAAP;;AAEzB,eAAO;AACL,gBAAM,UAAU,UAAV,CAAqB,SAAS,CAAT,CAArB,CADD;AAEL,cAAI,SAAS,SAAS,CAAT,CAAT,EAAsB,EAAtB,CAFC;AAGL,kBAAQ,UAAU,SAAV,CAAoB,SAAS,CAAT,CAApB,EAAiC,SAAS,CAAT,CAAjC;AAHH,SAAP;AAKD,OATD,MASO,IAAI,OAAO,IAAP,CAAY,IAAZ,CAAJ,EAAuB;AAC5B,YAAM,YAAW,KAAK,KAAL,CAAW,MAAX,CAAjB;AACA,YAAI,UAAS,MAAT,GAAkB,CAAtB,EAAyB,OAAO,EAAP;;AAEzB,eAAO;AACL,gBAAM,UAAU,UAAV,CAAqB,GAArB,CADD;AAEL,cAAI,SAAS,UAAS,CAAT,CAAT,EAAsB,EAAtB,CAFC;AAGL,kBAAQ,UAAU,SAAV,CAAoB,GAApB,EAAyB,UAAS,CAAT,CAAzB;AAHH,SAAP;AAKD;AACD,aAAO,EAAP;AACD;;;;;;kBA3FkB,S","file":"own-parser.js","sourcesContent":["export default class OwnParser {\n\n  static getWhoType(who) {\n    const whoInt = parseInt(who, 10);\n    switch (whoInt) {\n      case 0 :\n        return 'scenario';\n      case 1 :\n        return 'light';\n      case 2 :\n        return 'automation';\n      case 3 :\n        return 'load';\n      case 4 :\n        return 'temperature';\n      case 5 :\n        return 'burglar-alarm';\n      case 7 :\n        return 'video-door';\n      case 13 :\n        return 'gateway';\n      case 15 :\n      case 25 :\n        return 'CEN';\n      case 16 :\n        return 'sound-system';\n      case 22 :\n        return 'sound-diffusion';\n      case 17 :\n        return 'scene';\n      case 18 :\n        return 'energy';\n      default:\n        return null;\n    }\n  }\n\n  static getStatus(who, state) {\n    const whoInt = parseInt(who, 10);\n    const stateInt = parseInt(state, 10);\n    switch (whoInt) {\n      case 1 :\n        // light\n        switch (stateInt) {\n          case 0:\n            return false;\n          case 1:\n            return true;\n          default:\n            return null;\n        }\n\n      case 2 :\n        // automation\n        return stateInt;\n\n      case 4 :\n        // temperature\n        return stateInt / 10;\n\n      default:\n        return null;\n    }\n  }\n\n  static parseCode(code) {\n    if (typeof code !== 'string') return {};\n    const reGen = /^\\*([0-9]+)\\*([0-2])\\*([0-9]+)##$/i;\n    // *#4*3*0*0284##\n    const reTemp = /^\\*#4\\*([0-9]+)\\*0\\*([0-9]+)##$/i;\n\n    if (reGen.test(code)) {\n      const response = code.match(reGen);\n      if (response.length < 4) return {};\n\n      return {\n        type: OwnParser.getWhoType(response[1]),\n        id: parseInt(response[3], 10),\n        status: OwnParser.getStatus(response[1], response[2])\n      };\n    } else if (reTemp.test(code)) {\n      const response = code.match(reTemp);\n      if (response.length < 3) return {};\n\n      return {\n        type: OwnParser.getWhoType('4'),\n        id: parseInt(response[1], 10),\n        status: OwnParser.getStatus('4', response[2])\n      };\n    }\n    return {};\n  }\n\n}\n"]}