{"version":3,"sources":["../src/own-platform.js"],"names":["Accessory","Characteristic","UUID","Service","OwnPlatform","log","config","api","console","defaultConfig","timeout","scanLights","scanAutomations","scanTempSensors","maxTempSensors","port","useConn","bindings","lights","temps","automations","server","Error","cb","classes","OwnAccessoryFactory","getAccessories","LightOwnAccessory","AutomationOwnAccessory","TempSensorOwnAccessory","accessories","lightsFound","automationsFound","tempFound","sendCallback","socket","OwnSocketUtils","scanResults","callback","lightIds","forEach","lightCode","light","OwnParser","parseCode","id","push","name","ownId","send","err","error","message","err2","lights2","automationIds","automationCode","automation","sensorsTry","i","falseFound","Promise","mapSeries","index","resolve","reject","result","length","filter","value","then","tempSensors","tempSensorIds","tempSensorCode","tempSensor","OwnPlatformFactory","hbAccessory","hbCharacteristic","hbUUID","hbService"],"mappings":"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","file":"own-platform.js","sourcesContent":["import {defaults, times, has, includes} from 'lodash';\nimport Promise from 'bluebird';\nimport {OwnAccessoryFactory} from './own-accessory';\nimport OwnSocketUtils from './utils/own-socket';\nimport OwnParser from './utils/own-parser';\n\nlet Accessory;\nlet Characteristic;\nlet UUID;\nlet Service;\n\nclass OwnPlatform {\n  constructor(log, config, api) {\n    this.log = log || console.log;\n\n    this.log('Constructing platform...');\n    const defaultConfig = {\n      timeout: 5,\n      scanLights: true,\n      scanAutomations: true,\n      scanTempSensors: true,\n      maxTempSensors: 20,\n      port: 20000,\n      useConn: true,\n      bindings: {\n        lights: {},\n        temps: {},\n        automations: {}\n      }\n    };\n\n    this.config = defaults(config, defaultConfig);\n    if (!config.server) {\n      throw new Error('Missing config.server in platform');\n    }\n  }\n\n  // Fetch accessories\n  accessories(cb) {\n    this.log('Fetch OWN accessories');\n    const classes = {Accessory, Characteristic, UUID, Service};\n    const {LightOwnAccessory, AutomationOwnAccessory, TempSensorOwnAccessory} = OwnAccessoryFactory.getAccessories(classes);\n\n    const accessories = [];\n\n    let lightsFound = false;\n    let automationsFound = false;\n    let tempFound = false;\n\n    const sendCallback = () => {\n      if ((lightsFound || !this.config.scanLights)\n          && (automationsFound || !this.config.scanAutomations)\n          && (tempFound || !this.config.scanTempSensors)) {\n        cb(accessories);\n      }\n    };\n\n    const socket = new OwnSocketUtils(this.config.server, this.config.port, this.config.useConn);\n    const scanResults = (lights, callback) => {\n      const lightIds = [];\n      this.log('Lights : %j', lights);\n\n      lights.forEach((lightCode) => {\n        const light = OwnParser.parseCode(lightCode);\n        // Ignore duplicate ids\n        if (includes(lightIds, light.id)) return;\n        lightIds.push(light.id);\n        let name = `light ${light.id}`;\n        if (has(this.config, `bindings.lights.${light.id}`)) {\n          name = this.config.bindings.lights[light.id];\n        }\n        accessories.push(new LightOwnAccessory({\n          log: this.log,\n          name,\n          ownId: light.id,\n          config: this.config\n        }));\n      });\n\n      lightsFound = true;\n\n      callback();\n    };\n\n    if (this.config.scanLights) {\n      // Send light probe\n      socket.send('*#1*0##', (err, lights) => {\n        if (err) {\n          this.log.error(err);\n          if (err.message === 'NACK') {\n            this.log('Retry with prefix *99*1##');\n            socket.send(['*99*1##', '*#1*0##'], (err2, lights2) => {\n              if (err2) {\n                this.log('Failure.');\n                return;\n              }\n              scanResults(lights2, sendCallback);\n            });\n            return;\n          }\n        }\n        scanResults(lights, sendCallback);\n      });\n    }\n\n    if (this.config.scanAutomations) {\n      // Send automation probe\n      socket.send('*#2*0##', (err, automations) => {\n        if (err) this.log.error(err);\n        const automationIds = [];\n        this.log('Automations : %j', automations);\n\n        automations.forEach((automationCode) => {\n          const automation = OwnParser.parseCode(automationCode);\n          // Ignore duplicate ids\n          if (includes(automationIds, automation.id)) return;\n          automationIds.push(automation.id);\n          let name = `automation ${automation.id}`;\n          if (has(this.config, `bindings.automations.${automation.id}`)) {\n            name = this.config.bindings.automations[automation.id];\n          }\n          accessories.push(new AutomationOwnAccessory({\n            log: this.log,\n            name,\n            ownId: automation.id,\n            config: this.config\n          }));\n        });\n\n        automationsFound = true;\n        sendCallback();\n      });\n    }\n\n    if (this.config.scanTempSensors) {\n      const sensorsTry = times(this.config.maxTempSensors, i => i + 1);\n      let falseFound = false;\n      Promise.mapSeries(sensorsTry, (index) =>\n          new Promise((resolve, reject) => {\n            if (falseFound) return resolve(false);\n\n            return socket.send(`*#4*${index}*0##`, (err, result) => {\n              if (err) {\n                falseFound = true;\n                return resolve(false);\n              }\n              if (result.length > 0) return resolve(result[0]);\n              falseFound = true;\n              return resolve(false);\n            });\n          })\n        )\n        .filter((value) => !!value)\n        .then((tempSensors) => {\n          this.log('Temp sensors : %j', tempSensors);\n          const tempSensorIds = [];\n          tempSensors.forEach((tempSensorCode) => {\n            const tempSensor = OwnParser.parseCode(tempSensorCode);\n            // Ignore duplicate ids\n            if (includes(tempSensorIds, tempSensor.id)) return;\n            tempSensorIds.push(tempSensor.id);\n            let name = `temp sensor ${tempSensor.id}`;\n            if (has(this.config, `bindings.temps.${tempSensor.id}`)) {\n              name = this.config.bindings.temps[tempSensor.id];\n            }\n            accessories.push(new TempSensorOwnAccessory({\n              log: this.log,\n              name,\n              ownId: tempSensor.id,\n              config: this.config\n            }));\n          });\n\n          tempFound = true;\n          sendCallback();\n        });\n    }\n  }\n}\n\n\n// Own Platform Factory\n// Allow to import Accessory, Characteristic and UUIDGen objects from homebridge\nclass OwnPlatformFactory {\n  static getPlatform(hbAccessory, hbCharacteristic, hbUUID, hbService) {\n    Accessory = hbAccessory;\n    Characteristic = hbCharacteristic;\n    UUID = hbUUID;\n    Service = hbService;\n\n    return OwnPlatform;\n  }\n}\n\nexport {\n  OwnPlatform,\n  OwnPlatformFactory\n};\n"]}