{"version":3,"sources":["../src/own-platform.js"],"names":[],"mappings":"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","file":"own-platform.js","sourcesContent":["import {defaults, times, includes} from 'lodash';\nimport Promise from 'bluebird';\nimport {OwnAccessoryFactory} from './own-accessory';\nimport OwnSocketUtils from './utils/own-socket';\nimport OwnParser from './utils/own-parser';\n\nlet Accessory;\nlet Characteristic;\nlet UUID;\nlet Service;\n\nclass OwnPlatform {\n  constructor(log, config, api) {\n    this.log = log || console.log;\n\n    this.log('Constructing platform...');\n    const defaultConfig = {\n      timeout: 5,\n      scanLights: true,\n      scanAutomations: true,\n      scanTempSensors: true,\n      maxTempSensors: 20,\n      port: 20000\n    };\n\n    this.config = defaults(config, defaultConfig);\n    if (!config.server) {\n      throw new Error('Missing config.server in platform');\n    }\n  }\n\n  // Fetch accessories\n  accessories(cb) {\n    this.log('Fetch OWN accessories');\n    const classes = {Accessory, Characteristic, UUID, Service};\n    const {LightOwnAccessory, AutomationOwnAccessory, TempSensorOwnAccessory} = OwnAccessoryFactory.getAccessories(classes);\n\n    const accessories = [];\n\n    let lightsFound = false;\n    let automationsFound = false;\n    let tempFound = false;\n\n    const sendCallback = () => {\n      if ((lightsFound || !this.config.scanLights)\n          && (automationsFound || !this.config.scanAutomations)\n          && (tempFound || !this.config.scanTempSensors)) {\n        cb(accessories);\n      }\n    };\n\n    const socket = new OwnSocketUtils(this.config.server, this.config.port);\n\n    if (this.config.scanLights) {\n      // Send light probe\n      socket.send('*#1*0##', (err, lights) => {\n        if (err) this.log.error(err);\n        const lightIds = [];\n        this.log('Lights : %j', lights);\n\n        lights.forEach((lightCode) => {\n          const light = OwnParser.parseCode(lightCode);\n          // Ignore duplicate ids\n          if (includes(lightIds, light.id)) return;\n          lightIds.push(light.id);\n          accessories.push(new LightOwnAccessory({\n            log: this.log,\n            name: `light ${light.id}`,\n            ownId: light.id,\n            config: this.config\n          }));\n        });\n\n        lightsFound = true;\n        sendCallback();\n      });\n    }\n\n    if (this.config.scanAutomations) {\n      // Send automation probe\n      socket.send('*#2*0##', (err, automations) => {\n        if (err) this.log.error(err);\n        const automationIds = [];\n        this.log('Automations : %j', automations);\n\n        automations.forEach((automationCode) => {\n          const automation = OwnParser.parseCode(automationCode);\n          // Ignore duplicate ids\n          if (includes(automationIds, automation.id)) return;\n          automationIds.push(automation.id);\n          accessories.push(new AutomationOwnAccessory({\n            log: this.log,\n            name: `automation ${automation.id}`,\n            ownId: automation.id,\n            config: this.config\n          }));\n        });\n\n        automationsFound = true;\n        sendCallback();\n      });\n    }\n\n    if (this.config.scanTempSensors) {\n      const sensorsTry = times(this.config.maxTempSensors, i => i + 1);\n      let falseFound = false;\n      Promise.mapSeries(sensorsTry, (index) =>\n          new Promise((resolve, reject) => {\n            if (falseFound) return resolve(false);\n\n            return socket.send(`*#4*${index}*0##`, (err, result) => {\n              if (err) {\n                falseFound = true;\n                return resolve(false);\n              }\n              if (result.length > 0) return resolve(result[0]);\n              falseFound = true;\n              return resolve(false);\n            });\n          })\n        )\n        .filter((value) => !!value)\n        .then((tempSensors) => {\n          this.log('Temp sensors : %j', tempSensors);\n          const tempSensorIds = [];\n          tempSensors.forEach((tempSensorCode) => {\n            const tempSensor = OwnParser.parseCode(tempSensorCode);\n            // Ignore duplicate ids\n            if (includes(tempSensorIds, tempSensor.id)) return;\n            tempSensorIds.push(tempSensor.id);\n            accessories.push(new TempSensorOwnAccessory({\n              log: this.log,\n              name: `temp sensor ${tempSensor.id}`,\n              ownId: tempSensor.id,\n              config: this.config\n            }));\n          });\n\n          tempFound = true;\n          sendCallback();\n        });\n    }\n  }\n}\n\n\n// Own Platform Factory\n// Allow to import Accessory, Characteristic and UUIDGen objects from homebridge\nclass OwnPlatformFactory {\n  static getPlatform(hbAccessory, hbCharacteristic, hbUUID, hbService) {\n    Accessory = hbAccessory;\n    Characteristic = hbCharacteristic;\n    UUID = hbUUID;\n    Service = hbService;\n\n    return OwnPlatform;\n  }\n}\n\nexport {\n  OwnPlatform,\n  OwnPlatformFactory\n};\n"]}